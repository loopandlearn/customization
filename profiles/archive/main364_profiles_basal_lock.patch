Submodule Loop 7b04dec..1a088f9:
diff --git a/Loop/Loop/Managers/DeviceDataManager.swift b/Loop/Loop/Managers/DeviceDataManager.swift
index 2751f18f..4866c85c 100644
--- a/Loop/Loop/Managers/DeviceDataManager.swift
+++ b/Loop/Loop/Managers/DeviceDataManager.swift
@@ -1636,6 +1636,10 @@ extension DeviceDataManager: TherapySettingsViewModelDelegate {
         }
     }
     
+    func updateCurrentProfileName() {
+        loopManager.updateCurrentProfileName()
+    }
+    
     func saveCompletion(therapySettings: TherapySettings) {
 
         loopManager.mutateSettings { settings in
diff --git a/Loop/Loop/Managers/LoopDataManager.swift b/Loop/Loop/Managers/LoopDataManager.swift
index c3f0c422..f6accc52 100644
--- a/Loop/Loop/Managers/LoopDataManager.swift
+++ b/Loop/Loop/Managers/LoopDataManager.swift
@@ -229,6 +229,10 @@ final class LoopDataManager {
         lockedSettings.value
     }
 
+    func updateCurrentProfileName () {
+        notify(forChange: .preferences)
+    }
+    
     func mutateSettings(_ changes: (_ settings: inout LoopSettings) -> Void) {
         var oldValue: LoopSettings!
         let newValue = lockedSettings.mutate { settings in
diff --git a/Loop/Loop/Views/SettingsView.swift b/Loop/Loop/Views/SettingsView.swift
index 60e36b9a..f2a41195 100644
--- a/Loop/Loop/Views/SettingsView.swift
+++ b/Loop/Loop/Views/SettingsView.swift
@@ -52,6 +52,7 @@ public struct SettingsView: View {
             case favoriteFoods
             case therapySettings
             case preferences
+            case profiles
         }
     }
     
@@ -163,6 +164,19 @@ public struct SettingsView: View {
                     FavoriteFoodsView()
                 case .preferences:
                     PreferencesView(viewModel: PreferencesViewModel(preferencesProvider: Preferences.shared)).environmentObject(displayGlucosePreference)
+                case .profiles:
+                    ProfileView(viewModel: ProfileViewModel(therapySettings: self.viewModel.therapySettings(),
+                                                            sensitivityOverridesEnabled: FeatureFlags.sensitivityOverridesEnabled,
+                                                            adultChildInsulinModelSelectionEnabled: FeatureFlags.adultChildInsulinModelSelectionEnabled,
+                                                            delegate: self.viewModel.therapySettingsViewModelDelegate))
+                    .environmentObject(displayGlucosePreference)
+                    .environment(\.dismissAction, self.dismiss)
+                    .environment(\.appName, self.appName)
+                    .environment(\.chartColorPalette, .primary)
+                    .environment(\.carbTintColor, self.carbTintColor)
+                    .environment(\.glucoseTintColor, self.glucoseTintColor)
+                    .environment(\.guidanceColors, self.guidanceColors)
+                    .environment(\.insulinTintColor, self.insulinTintColor)
                 }
             }
         }
@@ -300,7 +314,11 @@ extension SettingsView {
                             imageView: Image("Therapy Icon"),
                             label: NSLocalizedString("Therapy Settings", comment: "Title text for button to Therapy Settings"),
                             descriptiveText: NSLocalizedString("Diabetes Treatment", comment: "Descriptive text for Therapy Settings"))
-            
+            LargeButton(action: { sheet = .profiles },
+                        includeArrow: true,
+                        imageView: AnyView(Image(systemName: "arrow.triangle.2.circlepath").font(.system(size: 30, weight: .bold))),
+                        label: NSLocalizedString("Profiles", comment: "Title text for button to Profiles"),
+                        descriptiveText: NSLocalizedString("Switch between profiles for different scenarios", comment: "Descriptive text for Profiles"))
             ForEach(pluginMenuItems.filter {$0.section == .configuration}) { item in
                 item.view
             }
Submodule LoopKit 2254113..c213415:
diff --git a/LoopKit/LoopKit.xcodeproj/project.pbxproj b/LoopKit/LoopKit.xcodeproj/project.pbxproj
index 6e177b30..7ec12a27 100644
--- a/LoopKit/LoopKit.xcodeproj/project.pbxproj
+++ b/LoopKit/LoopKit.xcodeproj/project.pbxproj
@@ -863,6 +863,12 @@
 		C1FAEC1D264AD6B400A3250B /* DeviceStatusBadge.swift in Sources */ = {isa = PBXBuildFile; fileRef = C1FAEC1C264AD6B400A3250B /* DeviceStatusBadge.swift */; };
 		C1FAEC1F264AE12700A3250B /* UIImage.swift in Sources */ = {isa = PBXBuildFile; fileRef = B47ECF8725DC20810024A54D /* UIImage.swift */; };
 		C1FAEC21264AEEA300A3250B /* UIImage.swift in Sources */ = {isa = PBXBuildFile; fileRef = C1FAEC20264AEEA300A3250B /* UIImage.swift */; };
+		DD508E062A17712D00EEF8FD /* ProfileViewModel+FileManagement.swift in Sources */ = {isa = PBXBuildFile; fileRef = DD508E052A17712D00EEF8FD /* ProfileViewModel+FileManagement.swift */; };
+		DD508E082A17763700EEF8FD /* NewProfileEditor.swift in Sources */ = {isa = PBXBuildFile; fileRef = DD508E072A17763700EEF8FD /* NewProfileEditor.swift */; };
+		DD7122612A1D2AA4004FE653 /* ProfilePreviewView.swift in Sources */ = {isa = PBXBuildFile; fileRef = DD7122602A1D2AA4004FE653 /* ProfilePreviewView.swift */; };
+		DDAF746729F422C600719F0A /* ProfileView.swift in Sources */ = {isa = PBXBuildFile; fileRef = DDAF746629F422C600719F0A /* ProfileView.swift */; };
+		DDAF746929F4234000719F0A /* ProfileViewModel.swift in Sources */ = {isa = PBXBuildFile; fileRef = DDAF746829F4234000719F0A /* ProfileViewModel.swift */; };
+		DDCFC91E2AA9F702003DE656 /* RenameProfileEditor.swift in Sources */ = {isa = PBXBuildFile; fileRef = DDCFC91D2AA9F702003DE656 /* RenameProfileEditor.swift */; };
 		DD13BC702C3C71A70062313B /* BasalLockEditor.swift in Sources */ = {isa = PBXBuildFile; fileRef = DD13BC6F2C3C71A70062313B /* BasalLockEditor.swift */; };
 		DD13BC722C3C74CD0062313B /* PreferencesGuardrailWarning.swift in Sources */ = {isa = PBXBuildFile; fileRef = DD13BC712C3C74CD0062313B /* PreferencesGuardrailWarning.swift */; };
 		DD28B3712B80C074001044D4 /* PreferencesSetting.swift in Sources */ = {isa = PBXBuildFile; fileRef = DD28B3702B80C074001044D4 /* PreferencesSetting.swift */; };
@@ -1928,6 +1934,12 @@
 		C1FDCC0A29C786F90056E652 /* sk */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = sk; path = sk.lproj/Localizable.strings; sourceTree = "<group>"; };
 		C1FDCC0B29C786F90056E652 /* sk */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = sk; path = sk.lproj/Localizable.strings; sourceTree = "<group>"; };
 		C1FF3D4E29C786A900BDC1EC /* he */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = he; path = he.lproj/Localizable.strings; sourceTree = "<group>"; };
+		DD508E052A17712D00EEF8FD /* ProfileViewModel+FileManagement.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "ProfileViewModel+FileManagement.swift"; sourceTree = "<group>"; };
+		DD508E072A17763700EEF8FD /* NewProfileEditor.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = NewProfileEditor.swift; sourceTree = "<group>"; };
+		DD7122602A1D2AA4004FE653 /* ProfilePreviewView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ProfilePreviewView.swift; sourceTree = "<group>"; };
+		DDAF746629F422C600719F0A /* ProfileView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ProfileView.swift; sourceTree = "<group>"; };
+		DDAF746829F4234000719F0A /* ProfileViewModel.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ProfileViewModel.swift; sourceTree = "<group>"; };
+		DDCFC91D2AA9F702003DE656 /* RenameProfileEditor.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = RenameProfileEditor.swift; sourceTree = "<group>"; };
 		DD13BC6F2C3C71A70062313B /* BasalLockEditor.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = BasalLockEditor.swift; sourceTree = "<group>"; };
 		DD13BC712C3C74CD0062313B /* PreferencesGuardrailWarning.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = PreferencesGuardrailWarning.swift; sourceTree = "<group>"; };
 		DD28B3702B80C074001044D4 /* PreferencesSetting.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = PreferencesSetting.swift; sourceTree = "<group>"; };
@@ -3182,12 +3194,14 @@
 			isa = PBXGroup;
 			children = (
 				B455F3A325FF7FF0000ED456 /* CorrectionRangeOverridesEditorViewModel.swift */,
+				DDAF746829F4234000719F0A /* ProfileViewModel.swift */,
 				B4B7C1BB2604E3FC007379F6 /* CorrectionRangeScheduleEditorViewModel.swift */,
 				B4D4C20C25F95A8700DA809D /* DisplayGlucosePreference.swift */,
 				B455F48025FF9A8B000ED456 /* InsulinSensitivityScheduleEditorViewModel.swift */,
 				B455F2A125FBE985000ED456 /* SuspendThresholdEditorViewModel.swift */,
 				1D1FCE2424BD42EF000300A8 /* TherapySettingsViewModel.swift */,
 				DD545A5E2B80EFA900915F95 /* PreferencesViewModel.swift */,
+				DD508E052A17712D00EEF8FD /* ProfileViewModel+FileManagement.swift */,
 			);
 			path = ViewModels;
 			sourceTree = "<group>";
@@ -3384,6 +3398,10 @@
 				E96DCB5924AF74AC007117BC /* SuspendThresholdEditor.swift */,
 				1D1FCE2A24BE704A000300A8 /* TherapySetting+Settings.swift */,
 				1D1A019D24B678BF0077D86E /* TherapySettingsView.swift */,
+				DDAF746629F422C600719F0A /* ProfileView.swift */,
+				DD508E072A17763700EEF8FD /* NewProfileEditor.swift */,
+				DD7122602A1D2AA4004FE653 /* ProfilePreviewView.swift */,
+				DDCFC91D2AA9F702003DE656 /* RenameProfileEditor.swift */,
 			);
 			path = "Settings Editors";
 			sourceTree = "<group>";
@@ -4089,6 +4107,7 @@
 				E9086B4824B5405E0062F5C8 /* ChartAxisValueDoubleUnit.swift in Sources */,
 				B429D66C24BF7204003E1B4A /* GlucoseTrend.swift in Sources */,
 				432CF86720D76AB90066B889 /* SettingsTableViewCell.swift in Sources */,
+				DD508E082A17763700EEF8FD /* NewProfileEditor.swift in Sources */,
 				898B4E7B246DC6A70053C484 /* CorrectionRangeScheduleEditor.swift in Sources */,
 				E9E5E56A24D5CCE800B5DFFE /* OverrideViewCell.swift in Sources */,
 				892A5DB42231E191008961AB /* LevelMaskView.swift in Sources */,
@@ -4098,6 +4117,7 @@
 				B43D69D62A26642300DF0925 /* DemoPlaceHolderView.swift in Sources */,
 				E949E38F24B3711E00024DA0 /* InsulinModelInformationView.swift in Sources */,
 				895FE08B22011F0C00FCF18A /* EmojiInputHeaderView.swift in Sources */,
+				DDCFC91E2AA9F702003DE656 /* RenameProfileEditor.swift in Sources */,
 				895FE08322011F0C00FCF18A /* OverrideSelectionFooterView.swift in Sources */,
 				89AF78C22447E353002B4FCC /* Splat.swift in Sources */,
 				893C9F8C2447DBD900CD4185 /* CardBuilder.swift in Sources */,
@@ -4149,9 +4169,11 @@
 				E9C58A6E24DA65E400487A17 /* HistoricalOverrideDetailView.swift in Sources */,
 				895FE08222011F0C00FCF18A /* LabeledTextFieldTableViewCell.swift in Sources */,
 				B43DA44224D9CD8500CAFF4E /* Environment+Colors.swift in Sources */,
+				DD508E062A17712D00EEF8FD /* ProfileViewModel+FileManagement.swift in Sources */,
 				892A5DB22231E191008961AB /* LoadingTableViewCell.swift in Sources */,
 				B4D3D4AD25B8A94E0085BA0F /* DisplayGlucoseUnitObserver.swift in Sources */,
 				A9D3FF102A6C19CA000C891D /* ChartAxisValueDoubleLog.swift in Sources */,
+				DD7122612A1D2AA4004FE653 /* ProfilePreviewView.swift in Sources */,
 				E96DCB5A24AF74AC007117BC /* SuspendThresholdEditor.swift in Sources */,
 				E96DCB5824AEF50F007117BC /* SuspendThresholdInformationView.swift in Sources */,
 				A9D3FF0C2A6C198C000C891D /* CollectionType.swift in Sources */,
@@ -4228,6 +4250,7 @@
 				E93C86B624D08CAD0073089B /* InsulinSensitivityInformationView.swift in Sources */,
 				C18733AF29B9492300519CDF /* Collection.swift in Sources */,
 				892A5DA22231E137008961AB /* HUDProvider.swift in Sources */,
+				DDAF746929F4234000719F0A /* ProfileViewModel.swift in Sources */,
 				898E6E6C224194060019E459 /* UIColor.swift in Sources */,
 				43BA717D201EE7090058961E /* GlucoseRangeTableViewCell.swift in Sources */,
 				B455F3A425FF7FF0000ED456 /* CorrectionRangeOverridesEditorViewModel.swift in Sources */,
@@ -4255,6 +4278,7 @@
 				1D1065E9282DC54700026A70 /* VideoPlayView.swift in Sources */,
 				E99A132E2557548300D3F5B3 /* SegmentedGaugeBar.swift in Sources */,
 				B455F31825FBEC5F000ED456 /* SuspendThresholdEditorViewModel.swift in Sources */,
+				DDAF746729F422C600719F0A /* ProfileView.swift in Sources */,
 				892A5DB32231E191008961AB /* LevelHUDView.swift in Sources */,
 				B41A60B223D1DBC700636320 /* UIFont.swift in Sources */,
 				B41A60AF23D1DB5B00636320 /* TableViewTitleLabel.swift in Sources */,
diff --git a/LoopKit/LoopKitUI/ViewModels/ProfileViewModel+FileManagement.swift b/LoopKit/LoopKitUI/ViewModels/ProfileViewModel+FileManagement.swift
new file mode 100644
index 00000000..74724fb7
--- /dev/null
+++ b/LoopKit/LoopKitUI/ViewModels/ProfileViewModel+FileManagement.swift
@@ -0,0 +1,408 @@
+//
+//  ProfileViewModel+FileManagement.swift
+//  LoopKitUI
+//
+//  Created by Jonas Björkert on 2023-05-19.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import LoopKit
+import HealthKit
+
+public enum ProfileValidationError: Error, LocalizedError {
+    case fileLoadError
+    case unsupportedIncrement
+    case correctionRangeError
+    case insulinSensitivityError
+    case carbRatioError
+    case basalRateError
+    case maxBasalRateNotSet
+
+    public var errorDescription: String? {
+        switch self {
+        case .fileLoadError:
+            return "Unable to load the profile file."
+        case .unsupportedIncrement:
+            return "The profile contains unsupported increments."
+        case .correctionRangeError:
+            return "Correction Range values are out of bounds."
+        case .insulinSensitivityError:
+            return "Insulin Sensitivity values are out of bounds."
+        case .carbRatioError:
+            return "Carb Ratio values are out of bounds."
+        case .basalRateError:
+            return "Basal Rate values are out of bounds."
+        case .maxBasalRateNotSet:
+            return "Maximum Basal Rate is not set."
+        }
+    }
+}
+
+public enum LoadProfileResult {
+    case success
+    case failure(Error)
+}
+
+// MARK: File management
+extension ProfileViewModel {
+    private func setCurrentProfile(name: String, syncChange: Bool = false) {
+        let sanitizedProfileName = sanitizeProfileName(name)
+        currentProfileName = sanitizedProfileName
+        if syncChange {
+            triggerProfileSync()
+        }
+    }
+    
+    private func clearCurrentProfile() {
+        currentProfileName = nil
+        triggerProfileSync()
+    }
+    
+    private func getCurrentProfileName() -> String? {
+        return currentProfileName
+    }
+    
+    private var profilesDirectory: URL {
+        let fileManager = FileManager.default
+        let documentsDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask)[0]
+        return documentsDirectory.appendingPathComponent("LoopProfile")
+    }
+
+    private func createProfileDirectoryIfNotExists() throws {
+        let fileManager = FileManager.default
+        var isDir : ObjCBool = false
+        if !fileManager.fileExists(atPath: profilesDirectory.path, isDirectory: &isDir) {
+            try fileManager.createDirectory(at: profilesDirectory, withIntermediateDirectories: true, attributes: nil)
+        } else if !isDir.boolValue {
+            throw NSError(domain: NSCocoaErrorDomain, code: NSFileWriteFileExistsError, userInfo: nil)
+        }
+    }
+
+    private func getAllProfileFiles() throws -> [URL] {
+        let fileManager = FileManager.default
+        let files = try fileManager.contentsOfDirectory(at: profilesDirectory, includingPropertiesForKeys: nil)
+        return files.filter { $0.pathExtension == "json" }
+    }
+
+    private func encodeProfile(_ profile: Profile) throws -> Data {
+        return try JSONEncoder().encode(profile)
+    }
+
+    private func decodeProfile(from data: Data) throws -> Profile {
+        return try JSONDecoder().decode(Profile.self, from: data)
+    }
+
+    public func sanitizeProfileName(_ name: String) -> String {
+        // Replace problematic characters
+        var sanitized = name.replacingOccurrences(of: ".", with: "_")
+        sanitized = sanitized.replacingOccurrences(of: "<", with: "_")
+
+        // Limit the name to 32 characters
+        if sanitized.count > 32 {
+            sanitized = String(sanitized.prefix(32))
+        }
+
+        return sanitized
+    }
+
+    public func saveProfile(withName name: String) {
+        let sanitizedName = sanitizeProfileName(name)
+
+        do {
+            try createProfileDirectoryIfNotExists()
+
+            if let existingProfile = getProfileReference(withName: sanitizedName) {
+                removeProfile(profileReference: existingProfile)
+            }
+
+            let profile = Profile(
+                name: sanitizedName,
+                correctionRange: (therapySettings.glucoseTargetRangeSchedule?.schedule(for: .milligramsPerDeciliter)!)!,
+                carbRatioSchedule: therapySettings.carbRatioSchedule!,
+                basalRateSchedule: therapySettings.basalRateSchedule!,
+                insulinSensitivitySchedule: (therapySettings.insulinSensitivitySchedule?.schedule(for: .milligramsPerDeciliter)!)!,
+                sortOrder: -1
+            )
+
+            let jsonData = try encodeProfile(profile)
+
+            let dateFormatter = DateFormatter()
+            dateFormatter.dateFormat = "yyyy-MM-dd-HH-mm-ss"
+            let fileName = dateFormatter.string(from: Date()) + ".json"
+            let fileURL = profilesDirectory.appendingPathComponent(fileName)
+
+            try jsonData.write(to: fileURL)
+            setCurrentProfile(name: sanitizedName, syncChange: true)
+
+            self.loadProfiles()
+        } catch {
+            print("An error occurred while saving profile: \(error)")
+        }
+    }
+
+    public func renameProfile(oldName: String, newName: String) {
+        let sanitizedProfileName = sanitizeProfileName(newName)
+
+        if currentProfileName == oldName {
+            setCurrentProfile(name: sanitizedProfileName, syncChange: true)
+        }
+        
+        do {
+            guard let profileReference = getProfileReference(withName: oldName) else {
+                print("Profile with old name not found.")
+                return
+            }
+            
+            let profile = try getProfile(from: profileReference)
+            
+            let newProfile = Profile(
+                name: sanitizedProfileName,
+                correctionRange: profile.correctionRange,
+                carbRatioSchedule: profile.carbRatioSchedule,
+                basalRateSchedule: profile.basalRateSchedule,
+                insulinSensitivitySchedule: profile.insulinSensitivitySchedule,
+                sortOrder: profile.sortOrder
+            )
+            
+            if let existingProfile = getProfileReference(withName: sanitizedProfileName) {
+                removeProfile(profileReference: existingProfile)
+            }
+            
+            let jsonData = try encodeProfile(newProfile)
+            let fileURL = profilesDirectory.appendingPathComponent(profileReference.fileName)
+            
+            try jsonData.write(to: fileURL)
+            
+            self.loadProfiles()
+        } catch {
+            print("An error occurred while renaming profile: \(error)")
+        }
+    }
+
+    public func updateProfilesOrder() {
+        for (index, profileReference) in profiles.enumerated() {
+            do {
+                var profile = try getProfile(from: profileReference)
+                let newProfile = Profile(
+                    name: profile.name,
+                    correctionRange: profile.correctionRange,
+                    carbRatioSchedule: profile.carbRatioSchedule,
+                    basalRateSchedule: profile.basalRateSchedule,
+                    insulinSensitivitySchedule: profile.insulinSensitivitySchedule,
+                    sortOrder: index
+                )
+                
+                let jsonData = try encodeProfile(newProfile)
+                let fileURL = profilesDirectory.appendingPathComponent(profileReference.fileName)
+                try jsonData.write(to: fileURL)
+                
+            } catch {
+                print("An error occurred while updating profile order: \(error)")
+            }
+        }
+        loadProfiles()
+    }
+    
+    public func loadProfiles() {
+        do {
+            let profileFiles = try getAllProfileFiles()
+            
+            var newProfiles = [ProfileReference]()
+            for fileURL in profileFiles {
+                let data = try Data(contentsOf: fileURL)
+                let profile = try decodeProfile(from: data)
+                let profileRef = ProfileReference(name: sanitizeProfileName(profile.name), fileName: fileURL.lastPathComponent, sortOrder: profile.sortOrder)
+                newProfiles.append(profileRef)
+            }
+            
+            newProfiles.sort { $0.sortOrder ?? 0 < $1.sortOrder ?? 0 }
+            
+            self.profiles = newProfiles
+        } catch {
+            print("An error occurred while loading profiles: \(error)")
+        }
+    }
+
+    public func loadProfile(profile: Profile, completion: @escaping (LoadProfileResult) -> Void) {
+        if(therapySettings.glucoseTargetRangeSchedule == profile.correctionRange &&
+           therapySettings.carbRatioSchedule == profile.carbRatioSchedule &&
+           therapySettings.basalRateSchedule == profile.basalRateSchedule &&
+           therapySettings.insulinSensitivitySchedule == profile.insulinSensitivitySchedule) {
+            self.setCurrentProfile(name: profile.name, syncChange: true)
+            completion(.success)
+        }
+        else
+        {
+            do {
+                delegate?.syncBasalRateSchedule(items: profile.basalRateSchedule.items, completion: { [weak self] result in
+                    switch result {
+                    case .success(let syncedSchedule):
+                        DispatchQueue.main.async {
+                            let unit = self?.therapySettings.glucoseTargetRangeSchedule?.unit ?? HKUnit.milligramsPerDeciliter
+                            self?.saveCorrectionRange(range: profile.correctionRange.schedule(for: unit)! )
+                            self?.saveCarbRatioSchedule(carbRatioSchedule: profile.carbRatioSchedule)
+                            self?.saveBasalRates(basalRates: syncedSchedule)
+                            self?.saveInsulinSensitivitySchedule(insulinSensitivitySchedule: profile.insulinSensitivitySchedule.schedule(for: unit)!)
+                            print("New profile loaded")
+                            self?.setCurrentProfile(name: profile.name, syncChange: false)
+                            completion(.success)
+                        }
+                    case .failure(let error):
+                        print("An error occurred while syncing basal rates: \(error)")
+                        completion(.failure(error))
+                    }
+                })
+            }
+        }
+    }
+
+    func getProfileReference(withName name: String) -> ProfileReference? {
+        let sanitizedInputName = sanitizeProfileName(name)
+        return profiles.first(where: { sanitizeProfileName($0.name) == sanitizedInputName })
+    }
+
+    public func removeProfile(profile: Profile) {
+        guard let profileReference = getProfileReference(withName: profile.name) else {
+            print("No ProfileReference found for given Profile")
+            return
+        }
+
+        removeProfile(profileReference: profileReference)
+        if getCurrentProfileName() == profile.name {
+            clearCurrentProfile()
+        }
+    }
+
+    public func removeProfile(profileReference: ProfileReference) {
+        do {
+            let fileManager = FileManager.default
+            let fileURL = profilesDirectory.appendingPathComponent(profileReference.fileName)
+            try fileManager.removeItem(at: fileURL)
+            loadProfiles()
+        } catch {
+            print("An error occurred while removing profile: \(error)")
+        }
+    }
+
+    func doesProfileExist(withName name: String) -> Bool {
+        return profiles.contains(where: { $0.name == name })
+    }
+
+    public func getProfile(from profileReference: ProfileReference) throws -> Profile {
+        let fileURL = profilesDirectory.appendingPathComponent(profileReference.fileName)
+        let data = try Data(contentsOf: fileURL)
+        let getProfile = try decodeProfile(from: data)
+        return getProfile
+    }
+
+    public func validateProfile(_ profile: Profile) -> Result<Void, ProfileValidationError> {
+        guard let supportedIncrements = delegate?.pumpSupportedIncrements() else {
+            return .failure(.fileLoadError)
+        }
+
+        // Checking Correction Range Schedule
+        for item in profile.correctionRange.items {
+            let minValue = HKQuantity(unit: .milligramsPerDeciliter, doubleValue: item.value.minValue)
+            let maxValue = HKQuantity(unit: .milligramsPerDeciliter, doubleValue: item.value.maxValue)
+
+            if !(Guardrail.correctionRange.absoluteBounds.contains(minValue) && Guardrail.correctionRange.absoluteBounds.contains(maxValue)) {
+                return .failure(.correctionRangeError)
+            }
+        }
+
+        // Checking Insulin Sensitivity Schedule
+        for item in profile.insulinSensitivitySchedule.items {
+            let value = HKQuantity(unit: HKUnit.milligramsPerDeciliter.unitDivided(by: .internationalUnit()), doubleValue: item.value)
+
+            if !Guardrail.insulinSensitivity.absoluteBounds.contains(value) {
+                return .failure(.insulinSensitivityError)
+            }
+        }
+
+        // Checking Carb Ratio Schedule
+        for item in profile.carbRatioSchedule.items {
+            let value = HKQuantity(unit: .gramsPerUnit, doubleValue: item.value)
+
+            if !Guardrail.carbRatio.absoluteBounds.contains(value) {
+                return .failure(.carbRatioError)
+            }
+        }
+
+        // Checking Basal Rate Schedule
+        if let maximumBasalRate = therapySettings.maximumBasalRatePerHour {
+            for item in profile.basalRateSchedule.items {
+                let value = item.value
+
+                if value > maximumBasalRate || !supportedIncrements.basalRates.contains(value) {
+                    return .failure(.basalRateError)
+                }
+            }
+        } else {
+            return .failure(.maxBasalRateNotSet)
+        }
+
+        return .success(())
+    }
+
+    func isCorrectionRangeEqual(a: GlucoseRangeSchedule, b: GlucoseRangeSchedule) -> Bool {
+        guard a.items.count == b.items.count else {
+            return false
+        }
+        
+        for (item1, item2) in zip(a.items, b.items) {
+            if item1.startTime != item2.startTime ||
+                abs(item1.value.minValue - item2.value.minValue) > 0.01 ||
+                abs(item1.value.maxValue - item2.value.maxValue) > 0.01 {
+                return false
+            }
+        }
+        
+        return true
+    }
+    
+    func isInsulinSensitivityScheduleEqual(a: InsulinSensitivitySchedule, b: InsulinSensitivitySchedule) -> Bool {
+        guard a.items.count == b.items.count else {
+            return false
+        }
+        
+        for (item1, item2) in zip(a.items, b.items) {
+            if item1.startTime != item2.startTime ||
+                abs(item1.value - item2.value) > 0.01 {
+                return false
+            }
+        }
+        
+        return true
+    }
+    
+    public func isCurrentProfileOutOfSync() -> Bool {
+        guard let currentProfileName = self.currentProfileName,
+              let currentProfileReference = profiles.first(where: { $0.name == currentProfileName }),
+              let profile = try? getProfile(from: currentProfileReference),
+              let therapyGlucoseSchedule = therapySettings.glucoseTargetRangeSchedule?.schedule(for: HKUnit.milligramsPerDeciliter),
+              let therapyInsulinSensitivitySchedule = therapySettings.insulinSensitivitySchedule?.schedule(for: HKUnit.milligramsPerDeciliter) else {
+            return false // No current profile set or profile not found or schedules not available
+        }
+        
+        var isOutOfSync = false
+        
+        if !isCorrectionRangeEqual(a: therapyGlucoseSchedule, b: profile.correctionRange.schedule(for: HKUnit.milligramsPerDeciliter)!) {
+            print("Glucose target range schedule differs")
+            isOutOfSync = true
+        }
+        if therapySettings.carbRatioSchedule != profile.carbRatioSchedule {
+            print("Carb ratio schedule differs")
+            isOutOfSync = true
+        }
+        if therapySettings.basalRateSchedule != profile.basalRateSchedule {
+            print("Basal rate schedule differs")
+            isOutOfSync = true
+        }
+        if !isInsulinSensitivityScheduleEqual(a: therapyInsulinSensitivitySchedule, b: profile.insulinSensitivitySchedule.schedule(for: HKUnit.milligramsPerDeciliter)!) {
+            print("Insulin sensitivity schedule differs")
+            isOutOfSync = true
+        }
+        
+        return isOutOfSync
+    }
+}
diff --git a/LoopKit/LoopKitUI/ViewModels/ProfileViewModel.swift b/LoopKit/LoopKitUI/ViewModels/ProfileViewModel.swift
new file mode 100644
index 00000000..a48fa667
--- /dev/null
+++ b/LoopKit/LoopKitUI/ViewModels/ProfileViewModel.swift
@@ -0,0 +1,86 @@
+//
+//  ProfileViewModel.swift
+//  LoopKitUI
+//
+//  Created by Jonas Björkert on 2023-04-22.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import Combine
+import LoopKit
+import HealthKit
+import SwiftUI
+
+public class ProfileViewModel: ObservableObject {
+    
+    @Published public var therapySettings: TherapySettings
+    @Published public var profiles = [ProfileReference]()
+    @Published public var currentProfileName: String? {
+        didSet {
+            UserDefaults.standard.setValue(currentProfileName, forKey: "currentProfileName")
+        }
+    }
+
+    internal weak var delegate: TherapySettingsViewModelDelegate?
+    
+    public init(therapySettings: TherapySettings,
+                pumpSupportedIncrements: (() -> PumpSupportedIncrements?)? = nil,
+                sensitivityOverridesEnabled: Bool = false,
+                adultChildInsulinModelSelectionEnabled: Bool = false,
+                prescription: Prescription? = nil,
+                delegate: TherapySettingsViewModelDelegate? = nil) {
+        self.therapySettings = therapySettings
+        self.delegate = delegate
+        self.currentProfileName = UserDefaults.standard.string(forKey: "currentProfileName")
+        self.loadProfiles()
+    }
+    
+    public func pumpSupportedIncrements() -> PumpSupportedIncrements? {
+        return delegate?.pumpSupportedIncrements()
+    }
+}
+
+public struct Profile: Codable {
+    let name: String
+    let correctionRange: GlucoseRangeSchedule
+    let carbRatioSchedule: CarbRatioSchedule
+    let basalRateSchedule: BasalRateSchedule
+    let insulinSensitivitySchedule: InsulinSensitivitySchedule
+    var sortOrder: Int?
+}
+
+public struct ProfileReference: Codable, Equatable {
+    var name: String
+    var fileName: String
+    var sortOrder: Int?
+}
+
+
+// MARK: Saving
+extension ProfileViewModel {
+    
+    public func saveCorrectionRange(range: GlucoseRangeSchedule) {
+        therapySettings.glucoseTargetRangeSchedule = range
+        delegate?.saveCompletion(therapySettings: therapySettings)
+    }
+    
+    public func saveBasalRates(basalRates: BasalRateSchedule) {
+        therapySettings.basalRateSchedule = basalRates
+        delegate?.saveCompletion(therapySettings: therapySettings)
+    }
+    
+    public func saveCarbRatioSchedule(carbRatioSchedule: CarbRatioSchedule) {
+        therapySettings.carbRatioSchedule = carbRatioSchedule
+        delegate?.saveCompletion(therapySettings: therapySettings)
+    }
+    
+    public func saveInsulinSensitivitySchedule(insulinSensitivitySchedule: InsulinSensitivitySchedule) {
+        therapySettings.insulinSensitivitySchedule = insulinSensitivitySchedule
+        delegate?.saveCompletion(therapySettings: therapySettings)
+    }
+
+    public func triggerProfileSync() {
+        delegate?.updateCurrentProfileName()
+    }
+}
diff --git a/LoopKit/LoopKitUI/ViewModels/TherapySettingsViewModel.swift b/LoopKit/LoopKitUI/ViewModels/TherapySettingsViewModel.swift
index 3650ef60..c5c1dc01 100644
--- a/LoopKit/LoopKitUI/ViewModels/TherapySettingsViewModel.swift
+++ b/LoopKit/LoopKitUI/ViewModels/TherapySettingsViewModel.swift
@@ -16,6 +16,7 @@ public protocol TherapySettingsViewModelDelegate: AnyObject {
     func syncDeliveryLimits(deliveryLimits: DeliveryLimits, completion: @escaping (Result<DeliveryLimits, Error>) -> Void)
     func saveCompletion(therapySettings: TherapySettings)
     func pumpSupportedIncrements() -> PumpSupportedIncrements?
+    func updateCurrentProfileName()
 }
 
 public class TherapySettingsViewModel: ObservableObject {
diff --git a/LoopKit/LoopKitUI/Views/Settings Editors/NewProfileEditor.swift b/LoopKit/LoopKitUI/Views/Settings Editors/NewProfileEditor.swift
new file mode 100644
index 00000000..446910e4
--- /dev/null
+++ b/LoopKit/LoopKitUI/Views/Settings Editors/NewProfileEditor.swift	
@@ -0,0 +1,79 @@
+//
+//  NewProfileEditor.swift
+//  LoopKitUI
+//
+//  Created by Jonas Björkert on 2023-05-19.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import SwiftUI
+
+struct NewProfileEditor: View {
+    @Binding var isPresented: Bool
+    @State var newProfileName: String
+    var viewModel: ProfileViewModel
+    @State private var showAlert = false
+
+    var body: some View {
+        VStack(spacing: 0) {
+            ModalHeaderButtonBar(
+                leading: { cancelButton },
+                center: {
+                    Text("New Profile")
+                        .font(.headline)
+                },
+                trailing: { addButton }
+            )
+
+            TextField("Profile Name", text: $newProfileName)
+                .textFieldStyle(RoundedBorderTextFieldStyle())
+                .padding()
+                .background(
+                    RoundedCorners(radius: 10, corners: [.bottomLeft, .bottomRight])
+                        .fill(Color(.secondarySystemGroupedBackground))
+                )
+        }
+        .padding(.horizontal)
+        .alert(isPresented: $showAlert) {
+            Alert(
+                title: Text("Overwrite Existing Profile"),
+                message: Text("A profile with this name already exists. Would you like to overwrite it?"),
+                primaryButton: .destructive(Text("Overwrite")) {
+                    self.viewModel.saveProfile(withName: self.newProfileName)
+                    self.isPresented = false
+                },
+                secondaryButton: .cancel()
+            )
+        }
+    }
+
+    var addButton: some View {
+        Button(
+            action: {
+                withAnimation {
+                    if viewModel.doesProfileExist(withName: self.newProfileName) {
+                        self.showAlert = true
+                    } else {
+                        self.viewModel.saveProfile(withName: self.newProfileName)
+                        self.isPresented = false
+                    }
+                }
+            }, label: {
+                Text("Add")
+            }
+        )
+    }
+
+    var cancelButton: some View {
+        Button(
+            action: {
+                withAnimation {
+                    self.isPresented = false
+                }
+            }, label: {
+                Text("Cancel")
+            }
+        )
+    }
+}
diff --git a/LoopKit/LoopKitUI/Views/Settings Editors/ProfilePreviewView.swift b/LoopKit/LoopKitUI/Views/Settings Editors/ProfilePreviewView.swift
new file mode 100644
index 00000000..6de3598f
--- /dev/null
+++ b/LoopKit/LoopKitUI/Views/Settings Editors/ProfilePreviewView.swift	
@@ -0,0 +1,326 @@
+//
+//  ProfilePreviewView.swift
+//  LoopKitUI
+//
+//  Created by Jonas Björkert on 2023-05-23.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import SwiftUI
+import HealthKit
+import LoopKit
+
+enum ActiveAlert {
+    case load
+    case delete
+    case error
+}
+
+struct ProfilePreviewView: View {
+    @EnvironmentObject private var displayGlucosePreference: DisplayGlucosePreference
+    @ObservedObject var viewModel: ProfileViewModel
+    @Environment(\.dismissAction) var dismissAction
+    @Environment(\.presentationMode) var presentationMode
+    var profile: Profile
+
+    @State private var showingAlert = false
+    @State private var activeAlert: ActiveAlert = .load
+    @State private var errorText: String?
+    @State private var newProfileName: String = ""
+    @State private var isRenamingProfile = false
+    @State private var shouldDismissSelf: Bool = false
+
+    let nilDestination: (_ dismiss: @escaping () -> Void) -> AnyView = { _ in AnyView(EmptyView()) }
+
+    var body: some View {
+        ZStack {
+            ScrollView {
+                VStack(alignment: .leading) {
+                    Text("Before proceeding, review the profile details below. Scroll to find options to Load, Rename, or Delete.")
+                        .font(.body)
+                        .foregroundColor(.primary)
+                        .padding([.leading, .trailing])
+                        .fixedSize(horizontal: false, vertical: true)
+                        .textCase(nil)
+                    
+                    profileCardStack
+                    
+                    Button(action: {
+                        activeAlert = .load
+                        showingAlert = true
+                    }) {
+                        HStack {
+                            Spacer()
+                            Text("Load")
+                                .foregroundColor(.white)
+                                .padding()
+                            Spacer()
+                        }
+                    }
+                    .background(Color.blue)
+                    .cornerRadius(10)
+                    .padding(.horizontal)
+                    
+                    Button(action: {
+                        isRenamingProfile = true
+                    }) {
+                        HStack {
+                            Spacer()
+                            Text("Rename")
+                                .foregroundColor(.white)
+                                .padding()
+                            Spacer()
+                        }
+                    }
+                    .background(Color.orange)
+                    .cornerRadius(10)
+                    .padding(.horizontal)
+                    
+                    Button(action: {
+                        activeAlert = .delete
+                        showingAlert = true
+                    }) {
+                        HStack {
+                            Spacer()
+                            Text("Delete")
+                                .foregroundColor(.white)
+                                .padding()
+                            Spacer()
+                        }
+                    }
+                    .background(Color.red)
+                    .cornerRadius(10)
+                    .padding(.horizontal)
+                    
+                }
+            }
+            .navigationBarHidden(false)
+            .background(Color(.systemGroupedBackground))
+            .navigationTitle(Text(profile.name))
+            .alert(isPresented: $showingAlert) {
+                switch activeAlert {
+                case .load:
+                    return Alert(
+                        title: Text("Load Profile"),
+                        message: Text("Do you want to load the profile \(profile.name)?"),
+                        primaryButton: .default(Text("Yes"), action: {
+                            let validationResult = viewModel.validateProfile(profile)
+                            switch validationResult {
+                            case .success:
+                                viewModel.loadProfile(profile: profile) { result in
+                                    switch result {
+                                    case .success:
+                                        dismissAction()
+                                    case .failure(let error):
+                                        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
+                                            self.errorText = error.localizedDescription
+                                            self.activeAlert = .error
+                                            self.showingAlert = true
+                                        }
+                                    }
+                                }
+                            case .failure(let error):
+                                DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
+                                    self.errorText = error.localizedDescription
+                                    self.activeAlert = .error
+                                    self.showingAlert = true
+                                }
+                            }
+                        }),
+                        secondaryButton: .cancel()
+                    )
+                case .delete:
+                    return Alert(
+                        title: Text("Delete Profile"),
+                        message: Text("Are you sure you want to delete the profile \(profile.name)? This action cannot be undone."),
+                        primaryButton: .destructive(Text("Delete"), action: {
+                            viewModel.removeProfile(profile: profile)
+                            self.presentationMode.wrappedValue.dismiss()
+                        }),
+                        secondaryButton: .cancel()
+                    )
+                case .error:
+                    return Alert(
+                        title: Text("Error loading profile"),
+                        message: Text(errorText ?? "Unknown error"),
+                        dismissButton: .default(Text("OK"))
+                    )
+                }
+            }
+            if isRenamingProfile {
+                // Some hacks here to mimic Alert behaviour.
+                // This function should be migrateed to Alert when iOS 16 is required.
+                Color.black.opacity(0.5)
+                    .edgesIgnoringSafeArea(.all)
+                    .onTapGesture {
+                        isRenamingProfile = false
+                    }
+                
+                RenameProfileEditor(
+                    isPresented: $isRenamingProfile,
+                    currentProfileName: profile.name,
+                    viewModel: viewModel,
+                    shouldDismissParent: $shouldDismissSelf
+                )
+                .transition(AnyTransition.move(edge: .bottom).combined(with: .opacity).animation(.default))
+                .offset(y: -22)
+            }
+        }
+        .onChange(of: shouldDismissSelf) { shouldDismiss in
+            if shouldDismiss {
+                self.presentationMode.wrappedValue.dismiss()
+            }
+        }
+    }
+
+    private var profileCardStack: CardStack {
+        var cards: [Card] = []
+
+        cards.append(correctionRangeSection)
+        cards.append(carbRatioSection)
+        cards.append(basalRatesSection)
+        cards.append(insulinSensitivitiesSection)
+
+        return CardStack(cards: cards)
+    }
+
+    private var correctionRangeSection: Card {
+        card(for: .glucoseTargetRange) {
+            if let items = profile.correctionRange.schedule(for: glucoseUnit)?.items {
+                SectionDivider()
+                ForEach(items.indices, id: \.self) { index in
+                    if index > 0 {
+                        SettingsDivider()
+                    }
+
+                    ScheduleRangeItem(time: items[index].startTime,
+                                      range: items[index].value,
+                                      unit: glucoseUnit,
+                                      guardrail: .correctionRange)
+                }
+            }
+        }
+    }
+
+    private var carbRatioSection: Card {
+        card(for: .carbRatio) {
+            SectionDivider()
+            let items = profile.carbRatioSchedule.items
+            ForEach(items.indices, id: \.self) { index in
+                if index > 0 {
+                    SettingsDivider()
+                }
+
+                ScheduleValueItem(time: items[index].startTime,
+                                  value: items[index].value,
+                                  unit: .gramsPerUnit,
+                                  guardrail: .carbRatio)
+            }
+        }
+    }
+
+    private var basalRatesSection: Card {
+        card(for: .basalRate) {
+            let items = profile.basalRateSchedule.items
+            if let supportedBasalRates = viewModel.pumpSupportedIncrements()?.basalRates
+            {
+                SectionDivider()
+                let total = profile.basalRateSchedule.total()
+                ForEach(items.indices, id: \.self) { index in
+                    if index > 0 {
+                        SettingsDivider()
+                    }
+
+                    ScheduleValueItem(time: items[index].startTime,
+                                      value:  items[index].value,
+                                      unit: .internationalUnitsPerHour,
+                                      guardrail: .basalRate(supportedBasalRates: supportedBasalRates))
+                }
+                HStack {
+                    Text("Total")
+                        .bold()
+                        .foregroundColor(.primary)
+                    Spacer()
+                    Text(String(format: "%.2f ",total))
+                        .foregroundColor(.primary) +
+                    Text("U/day")
+                        .foregroundColor(.secondary)
+                }
+            }
+        }
+    }
+
+    private var insulinSensitivitiesSection: Card {
+        card(for: .insulinSensitivity) {
+            if let items = profile.insulinSensitivitySchedule.schedule(for: glucoseUnit)?.items
+            {
+                SectionDivider()
+                ForEach(items.indices, id: \.self) { index in
+                    if index > 0 {
+                        SettingsDivider()
+                    }
+                    ScheduleValueItem(time: items[index].startTime,
+                                      value: items[index].value,
+                                      unit: sensitivityUnit,
+                                      guardrail: .insulinSensitivity)
+                }
+            }
+        }
+    }
+}
+
+
+struct SectionWithContent<Content>: View where Content: View {
+    let title: String
+    let content: Content
+
+    init(title: String,
+         content: () -> Content)
+    {
+        self.title = title
+        self.content = content()
+    }
+
+    public var body: some View {
+        Section {
+            Text(title)
+                .bold()
+                .frame(maxWidth: .infinity, alignment: .leading)
+            content
+        }
+    }
+}
+
+// MARK: Utilities
+extension ProfilePreviewView {
+
+    private var glucoseUnit: HKUnit {
+        displayGlucosePreference.unit
+    }
+
+    private var sensitivityUnit: HKUnit {
+        glucoseUnit.unitDivided(by: .internationalUnit())
+    }
+
+    private func card<Content>(for therapySetting: TherapySetting, @ViewBuilder content: @escaping () -> Content) -> Card where Content: View {
+        Card {
+            SectionWithContent(title: therapySetting.title,
+                               content: content)
+        }
+    }
+}
+
+fileprivate struct SectionDivider: View {
+    var body: some View {
+        Divider()
+            .padding(.trailing, -16)
+    }
+}
+
+fileprivate struct SettingsDivider: View {
+    var body: some View {
+        Divider()
+            .padding(.trailing, -8)
+    }
+}
diff --git a/LoopKit/LoopKitUI/Views/Settings Editors/ProfileView.swift b/LoopKit/LoopKitUI/Views/Settings Editors/ProfileView.swift
new file mode 100644
index 00000000..1c6244a4
--- /dev/null
+++ b/LoopKit/LoopKitUI/Views/Settings Editors/ProfileView.swift	
@@ -0,0 +1,173 @@
+//
+//  ProfileView.swift
+//  LoopKitUI
+//
+//  Created by Jonas Björkert on 2023-04-22.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import AVFoundation
+import HealthKit
+import LoopKit
+import SwiftUI
+
+public struct ProfileView: View {
+    @ObservedObject public var viewModel: ProfileViewModel
+    @Environment(\.dismissAction) var dismissAction
+    @State private var newProfileName: String = ""
+    @State private var isAddingNewProfile = false
+    @State private var selectedProfileIndex: Int? = nil
+    @State private var refreshID = UUID()
+
+    enum ActiveAlert: String, Identifiable {
+        case update, info
+        
+        var id: String {
+            return self.rawValue
+        }
+    }
+    @State private var activeAlert: ActiveAlert?
+    
+    public init(viewModel: ProfileViewModel) {
+        self.viewModel = viewModel
+    }
+    
+    private var dismissButton: some View {
+        Button(action: dismissAction) {
+            Text(LocalizedString("Done", comment: "Text for dismiss button"))
+                .bold()
+        }
+    }
+    
+    public var body: some View {
+        ZStack {
+            NavigationView {
+                ConfigurationPageScrollView(
+                    content: {
+                        VStack(alignment: .leading) {
+                            
+                            if !viewModel.profiles.isEmpty {
+                                List {
+                                    ForEach(viewModel.profiles.indices, id: \.self) { index in
+                                        if let profile = try? viewModel.getProfile(from: viewModel.profiles[index]) {
+                                            NavigationLink(destination: ProfilePreviewView(viewModel: viewModel, profile: profile)) {
+                                                HStack {
+                                                    if viewModel.currentProfileName == viewModel.profiles[index].name {
+                                                        Image(systemName: "checkmark")
+                                                            .foregroundColor(Color.blue)
+                                                    } else {
+                                                        // Add indentation to align with the checkmark for the active profile
+                                                        Image(systemName: "checkmark")
+                                                            .opacity(0) // Invisible
+                                                    }
+                                                    
+                                                    Text(viewModel.profiles[index].name)
+                                                }
+                                            }
+                                        }
+                                    }
+                                    .onMove(perform: moveProfile)
+                                }.id(refreshID)
+                                
+                            } else {
+                                Text("Use ‘+’ to create a new profile capturing your glucose targets, carb ratios, basal rates, and insulin sensitivities.")
+                                    .font(.subheadline)
+                                    .foregroundColor(.secondary)
+                                    .padding([.leading, .trailing])
+                                    .multilineTextAlignment(.leading)
+                                    .lineLimit(nil)
+                                    .textCase(nil)
+                            }
+                        }
+                    },
+                    actionArea: { EmptyView() } // no action area in this case
+                )
+                .navigationBarItems(
+                    leading: HStack {
+                        Button(action: { withAnimation { isAddingNewProfile = true } }) {
+                            Image(systemName: "plus")
+                        }
+                        
+                        Button(action: { activeAlert = .info }) {
+                            Image(systemName: "info.circle")
+                                .resizable()
+                                .frame(width: 24, height: 24)
+                        }
+                    },
+                    trailing: dismissButton
+                )
+                .navigationTitle(Text(LocalizedString("Profiles", comment: "Title on ProfileView")))
+            }
+            .navigationBarHidden(false)
+            .background(Color(.systemGroupedBackground))
+            .onAppear {
+                if viewModel.isCurrentProfileOutOfSync() {
+                    activeAlert = .update
+                }
+            }
+            
+            .alert(item: $activeAlert) { alertType in
+                switch alertType {
+                case .update:
+                    return Alert(
+                        title: Text("Profile Outdated"),
+                        message: Text("The current therapy settings have changed. Do you want to update the profile named: \(viewModel.currentProfileName ?? "")?"),
+                        primaryButton: .default(Text("Update")) {
+                            viewModel.saveProfile(withName: viewModel.currentProfileName ?? "")
+                        },
+                        secondaryButton: .cancel()
+                    )
+                case .info:
+                    return Alert(title: Text("Information"),
+                                 message: Text("A checkmark next to a profile name indicates that it's the active one.\n\nUse ‘+’ to create a new profile capturing your glucose targets, carb ratios, basal rates, and insulin sensitivities.\n\nTap on any profile to review its settings in detail. In detail view, you can Load, Rename or Delete that particular profile.\n\nWant to change the order of profiles? Simply press and hold on a profile, then drag it to your desired position."),
+                                 dismissButton: .default(Text("Got it!")))
+                }
+            }
+            
+            if isAddingNewProfile {
+                DarkenedOverlay()
+                
+                NewProfileEditor(
+                    isPresented: $isAddingNewProfile,
+                    newProfileName: newProfileName,
+                    viewModel: viewModel
+                )
+                .transition(AnyTransition.move(edge: .bottom).combined(with: .opacity).animation(.default))
+            }
+        }
+    }
+    
+    func moveProfile(from source: IndexSet, to destination: Int) {
+        viewModel.profiles.move(fromOffsets: source, toOffset: destination)
+        refreshID = UUID()
+        viewModel.updateProfilesOrder()
+    }
+}
+
+struct ProfileView_Previews: PreviewProvider {
+    static let preview_glucoseScheduleItems = [
+        RepeatingScheduleValue(startTime: 0, value: DoubleRange(80...90)),
+        RepeatingScheduleValue(startTime: 1800, value: DoubleRange(90...100)),
+        RepeatingScheduleValue(startTime: 3600, value: DoubleRange(100...110))
+    ]
+    
+    static let preview_therapySettings = TherapySettings(
+        glucoseTargetRangeSchedule: GlucoseRangeSchedule(unit: .milligramsPerDeciliter, dailyItems: preview_glucoseScheduleItems),
+        correctionRangeOverrides: CorrectionRangeOverrides(preMeal: DoubleRange(88...99),
+                                                           workout: DoubleRange(99...111),
+                                                           unit: .milligramsPerDeciliter),
+        maximumBolus: 4,
+        suspendThreshold: GlucoseThreshold.init(unit: .milligramsPerDeciliter, value: 60),
+        insulinSensitivitySchedule: InsulinSensitivitySchedule(unit: HKUnit.milligramsPerDeciliter.unitDivided(by: HKUnit.internationalUnit()), dailyItems: []),
+        carbRatioSchedule: nil,
+        basalRateSchedule: BasalRateSchedule(dailyItems: [RepeatingScheduleValue(startTime: 0, value: 0.2), RepeatingScheduleValue(startTime: 1800, value: 0.75)]))
+    
+    static let preview_supportedBasalRates = [0.2, 0.5, 0.75, 1.0]
+    static let preview_supportedBolusVolumes = [1.0, 2.0, 3.0]
+    static let preview_supportedMaximumBolusVolumes = [5.0, 10.0, 15.0]
+    
+    static var previews: some View {
+        ProfileView(viewModel: ProfileViewModel(therapySettings: preview_therapySettings))
+    }
+}
diff --git a/LoopKit/LoopKitUI/Views/Settings Editors/RenameProfileEditor.swift b/LoopKit/LoopKitUI/Views/Settings Editors/RenameProfileEditor.swift
new file mode 100644
index 00000000..8fd26665
--- /dev/null
+++ b/LoopKit/LoopKitUI/Views/Settings Editors/RenameProfileEditor.swift	
@@ -0,0 +1,92 @@
+//
+//  RenameProfileEditor.swift
+//  LoopKitUI
+//
+//  Created by Jonas Björkert on 2023-09-07.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import SwiftUI
+
+struct RenameProfileEditor: View {
+    @Binding var isPresented: Bool
+    @State var currentProfileName: String
+    @State var newProfileName: String = ""
+    var viewModel: ProfileViewModel
+    @State private var showAlert = false
+    @Binding var shouldDismissParent: Bool
+
+    var body: some View {
+        VStack(spacing: 0) {
+            ModalHeaderButtonBar(
+                leading: { cancelButton },
+                center: {
+                    Text("Rename Profile")
+                        .font(.subheadline)
+
+                },
+                trailing: { renameButton }
+            )
+            .onAppear {
+                self.newProfileName = currentProfileName
+            }
+            
+            TextField("Profile Name", text: $newProfileName)
+                .textFieldStyle(RoundedBorderTextFieldStyle())
+                .padding()
+                .background(
+                    RoundedCorners(radius: 10, corners: [.bottomLeft, .bottomRight])
+                        .fill(Color(.secondarySystemGroupedBackground))
+                )
+        }
+        .padding(.horizontal)
+        .alert(isPresented: $showAlert) {
+            Alert(
+                title: Text("Overwrite Existing Profile"),
+                message: Text("A profile with this name already exists. Would you like to overwrite it?"),
+                primaryButton: .destructive(Text("Overwrite")) {
+                    self.viewModel.renameProfile(oldName: currentProfileName, newName: self.newProfileName)
+                    self.shouldDismissParent = true
+                    self.isPresented = false
+                },
+                secondaryButton: .cancel()
+            )
+        }
+    }
+    
+    var renameButton: some View {
+        Button(
+            action: {
+                withAnimation {
+                    guard newProfileName != currentProfileName else {
+                        self.isPresented = false
+                        return
+                    }
+
+                    if viewModel.doesProfileExist(withName: self.newProfileName) {
+                        self.showAlert = true
+                    } else {
+                        self.viewModel.renameProfile(oldName: currentProfileName, newName: self.newProfileName)
+                        self.shouldDismissParent = true
+                        self.isPresented = false
+                    }
+                }
+            }, label: {
+                Text("Rename")
+            }
+        )
+    }
+    
+    var cancelButton: some View {
+        Button(
+            action: {
+                withAnimation {
+                    self.isPresented = false
+                }
+            }, label: {
+                Text("Cancel")
+            }
+        )
+    }
+}
Submodule LoopOnboarding 4c5c192..a25529c:
diff --git a/LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift b/LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift
index cc61f2d..6462e2c 100644
--- a/LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift	
+++ b/LoopOnboarding/LoopOnboardingKitUI/View Controllers/OnboardingUICoordinator.swift	
@@ -379,6 +379,9 @@ extension OnboardingUICoordinator: TherapySettingsViewModelDelegate {
             maximumBasalScheduleEntryCount: maximumBasalScheduleEntryCount
         )
     }
+    
+    func updateCurrentProfileName() {
+    }
 }
 
 
Submodule NightscoutService d839b66..0da2cd4:
diff --git a/NightscoutService/NightscoutServiceKit/Extensions/StoredSettings.swift b/NightscoutService/NightscoutServiceKit/Extensions/StoredSettings.swift
index 0bed9c6..7d6c12d 100644
--- a/NightscoutService/NightscoutServiceKit/Extensions/StoredSettings.swift
+++ b/NightscoutService/NightscoutServiceKit/Extensions/StoredSettings.swift
@@ -94,12 +94,20 @@ extension StoredSettings {
             return nil
         }
 
+        var store = ["Default": profile]
+        var defaultProfile = "Default"
+
+        if let name = UserDefaults.standard.string(forKey: "currentProfileName") {
+            defaultProfile = name
+            store[name] = profile
+        }
+
         return ProfileSet(
             startDate: date,
             units: bloodGlucoseUnit.shortLocalizedUnitString(avoidLineBreaking: false),
             enteredBy: "Loop",
-            defaultProfile: "Default",
-            store: ["Default": profile],
+            defaultProfile: defaultProfile,
+            store: store,
             settings: loopSettings,
             syncIdentifier: syncIdentifier.uuidString)
     }
